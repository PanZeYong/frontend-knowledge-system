!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((t="undefined"!=typeof globalThis?globalThis:t||self).tool={})}(this,(function(t){"use strict";const n=Object.prototype.toString,o=t=>o=>n.call(o)==="[object ".concat(t,"]"),e=t=>{const n=o("Object"),r=o("Array");if(!n(t)&&!r(t))return t;const c=r(t)?[]:{};for(let o in t){const i=t[o];t.hasOwnProperty(o)&&(c[o]=n(i)||r(i)?e(i):i)}return c},r=t=>o("Object")(t)||o("Array")(t),c=(t,n,o)=>{for(let e in n){const i=n[e];r(i)?c(t,i,"".concat(o,".").concat(e)):t["".concat(o,".").concat(e)]=n[e]}},i=t=>{const n=o("Array");return n(t)?t.reduce(((t,o)=>(n(o)?t.push(...i(o)):t.push(o),t)),[]):t};t.apply=function(t){let n;return(t=Object(t)||window).fn=this,n=arguments[1]?t.fn(...arguments[1]):t.fn(),delete t.fn,n},t.bind=function(){if("function"!=typeof this)throw new Error("Function.prototype.bind - what is trying to be bound is not callable");const t=arguments[0],n=this,o=Array.prototype.slice.call(arguments,1),e=function(){},r=function(){const r=Array.prototype.slice.call(arguments);return n.apply(this instanceof e?this:t,o.concat(r))};return e.prototype=this.prototype,r.prototype=new e,r},t.call=function(t){(t=t||window).fn=this;for(var n=arguments.length,o=new Array(n>1?n-1:0),e=1;e<n;e++)o[e-1]=arguments[e];return t.fn(...o)},t.createObj=(t,n)=>{const e=o("Object"),r=o("Function");if(!e&&!r)throw new TypeError("Object prototype may only be an Object: "+t);function c(){}console.log(null===t),c.prototype=t;const i=new c;return null===t&&(i.__proto__=t),void 0!==n&&Object.defineProperties(i,n),i},t.deepCopy=e,t.flattenArray=i,t.flattenObject=t=>{const n={};for(let o in t){const e=t[o];r(e)?c(n,e,o):n[o]=e}return n},t.instanceOf=(t,n)=>{for(n=n.prototype,t=t.__proto__;;){if(null===t)return!1;if(t===n)return!0;t=t.__proto__}},t.newObj=()=>{const t=o("Object"),n=new Object,e=Array.prototype.shift.call(arguments);n.__proto__=e.prototype;const r=e.apply(n,arguments);return t(r)?r:n},t.throttle=(t,n)=>{let o=0,e=null;return function(){const r=this,c=arguments;let i=Date.now();i-o>=n?(e&&(clearTimeout(e),e=null),o=i,t.apply(r,c)):e||(e=setTimeout((function(){t.apply(r,c),o=i}),n))}}}));
